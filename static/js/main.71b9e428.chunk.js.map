{"version":3,"sources":["pages/Home.module.scss","pages/Features.module.scss","logo.png","components/layout/Navbar.tsx","pages/Features.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","components/layout/Navbar.module.scss"],"names":["module","exports","pathname","useLocation","className","styles","navbar","to","brand","active","href","data","invite_link","target","rel","separator","add","home","src","logo","buttons","App","Navbar","exact","path","component","Home","Features","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,wB,mBCAtDD,EAAOC,QAAU,CAAC,IAAM,wB,mBCDxBD,EAAOC,QAAU,IAA0B,kC,0OCK5B,aACX,IAAMC,EAAWC,cAAcD,SAE/B,OACI,yBAAKE,UAAWC,IAAOC,QACnB,kBAAC,IAAD,CACIC,GAAG,IACHH,UACIC,IAAOG,MAAQ,KAAoB,MAAbN,EAAmBG,IAAOI,OAAS,KAHjE,QAQA,kBAAC,IAAD,CACIF,GAAG,YACHH,UAAwB,cAAbF,EAA2BG,IAAOI,OAAS,IAF1D,YAMA,uBACIC,KAAMC,EAAKC,YACXR,UAAwB,SAAbF,EAAsBG,IAAOI,OAAS,IAFrD,YAMA,uBACIC,KAAK,6BACLG,OAAO,SACPC,IAAI,uBAHR,aAOA,yBAAKV,UAAWC,IAAOU,YACvB,uBACIL,KAAK,iCACLG,OAAO,SACPC,IAAI,oBAHR,UAOA,uBACIJ,KAAK,qCACLG,OAAO,SACPC,IAAI,uBAHR,Y,iBCzCG,aACX,OACI,yBAAKV,UAAWC,IAAOW,KACnB,oFACA,6BACA,6BACA,6BACA,6BACA,uBACIN,KAAMC,EAAKC,YACXR,UAAU,mCACVS,OAAO,SACPC,IAAI,uBAJR,c,kCCNG,aACX,OACI,yBAAKV,UAAWC,IAAOY,MACnB,yBAAKb,UAAU,kCACX,yBAAKc,IAAKC,IAAMf,UAAU,cAE9B,+DACA,yFAEI,6BACA,6BACA,8BAEJ,yBAAKA,UAAWC,IAAOe,SACnB,uBACIhB,UAAU,4CACVM,KAAMC,EAAKC,aAEX,6CAEJ,kBAAC,IAAD,CACIR,UAAU,4CACVG,GAAG,aAEH,gDCHLc,MAnBf,WACI,OACI,kBAAC,IAAD,KACI,yBAAKjB,UAAU,OACX,kBAACkB,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,KAEvC,yBAAKvB,UAAU,uBAAf,YAEI,0BAAMA,UAAU,8BAAhB,kBAFJ,qBCLIwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5B9C,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,OAAS,uBAAuB,UAAY,4B","file":"static/js/main.71b9e428.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__10MGc\",\"buttons\":\"Home_buttons__T84xy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add\":\"Features_add__1w5Ta\"};","module.exports = __webpack_public_path__ + \"static/media/logo.76351a31.png\";","import React from \"react\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport styles from \"./Navbar.module.scss\";\nimport data from \"../../data.json\";\n\nexport default () => {\n    const pathname = useLocation().pathname;\n\n    return (\n        <div className={styles.navbar}>\n            <Link\n                to=\"/\"\n                className={\n                    styles.brand + \" \" + (pathname === \"/\" ? styles.active : \"\")\n                }\n            >\n                Viav\n            </Link>\n            <Link\n                to=\"/features\"\n                className={pathname === \"/features\" ? styles.active : \"\"}\n            >\n                Features\n            </Link>\n            <a\n                href={data.invite_link}\n                className={pathname === \"/add\" ? styles.active : \"\"}\n            >\n                Add Viav\n            </a>\n            <a\n                href=\"https://discord.gg/dd4pE7e\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Community\n            </a>\n            <div className={styles.separator} />\n            <a\n                href=\"https://patreon.com/brokenlamp\"\n                target=\"_blank\"\n                rel=\"noopener norefer\"\n            >\n                Donate\n            </a>\n            <a\n                href=\"https://github.com/BrokenLamp/viav\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                GitHub\n            </a>\n        </div>\n    );\n};\n","import React from \"react\";\nimport styles from \"./Features.module.scss\";\nimport data from \"../data.json\";\n\nexport default () => {\n    return (\n        <div className={styles.add}>\n            <h3>The magic begins instantly. No configuration. No BS.</h3>\n            <br />\n            <br />\n            <br />\n            <br />\n            <a\n                href={data.invite_link}\n                className=\"morph small hoverable glowy-link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Add Viav\n            </a>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./Home.module.scss\";\nimport logo from \"../logo.png\";\nimport data from \"../data.json\";\n\nexport default () => {\n    return (\n        <div className={styles.home}>\n            <div className=\"morph inset App-logo-container\">\n                <img src={logo} className=\"App-logo\" />\n            </div>\n            <h2>Discord Infinite Voice Channels</h2>\n            <p>\n                Viav is an open source bot to change the way we use Discord\n                <br />\n                <br />\n                <br />\n            </p>\n            <div className={styles.buttons}>\n                <a\n                    className=\"App-link morph small glowy-link hoverable\"\n                    href={data.invite_link}\n                >\n                    <strong>Add Viav</strong>\n                </a>\n                <Link\n                    className=\"App-link morph small glowy-link hoverable\"\n                    to=\"/features\"\n                >\n                    <strong>Features</strong>\n                </Link>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navbar from \"./components/layout/Navbar\";\n\nimport Features from \"./pages/Features\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <Navbar />\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route path=\"/features\" component={Features} />\n                </Switch>\n                <div className=\"App-made-with-heart\">\n                    Made with\n                    <span className=\"App-made-with-heart__heart\"> ♥️ </span>\n                    by Broken Lamp\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./neumorphism.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__38HqQ\",\"brand\":\"Navbar_brand__1tlIy\",\"active\":\"Navbar_active__31f_B\",\"separator\":\"Navbar_separator__2d4td\"};"],"sourceRoot":""}